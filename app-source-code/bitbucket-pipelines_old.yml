# app-source-code/bitbucket-pipelines.yml
image: atlassian/default-image:3

# =============================================================================
# INCLUIR DEFINICIONES DEL REPOSITORIO DE INFRAESTRUCTURA
# =============================================================================
# NOTA: Los YAML anchors (&) NO funcionan entre repositorios, por eso debemos
# descargar y ejecutar los scripts manualmente en cada step.
# =============================================================================
include:
  - remote: https://bitbucket.org/bancobase/infra-cicd-tools/raw/develop/bitbucket-pipelines.yml

# =============================================================================
# VARIABLES ESPEC√çFICAS DE ESTA APLICACI√ìN
# =============================================================================
definitions:
  variables:
    - name: APP_NAME
      value: "mi-aplicacion"
    - name: APP_PORT
      value: "3000"
    - name: CICD_SCRIPTS_BASE_URL
      value: "https://bitbucket.org/bancobase/infra-cicd-tools/raw/develop"

# =============================================================================
# PIPELINES PARA ESTA APLICACI√ìN
# =============================================================================
pipelines:
  
  # Pipeline autom√°tico para development
  branches:
    develop:
      - step:
          name: "üîß Setup Environment"
          script:
            - |
              echo "üì• Descargando scripts de setup..."
              curl -s -o /tmp/setup.sh ${CICD_SCRIPTS_BASE_URL}/scripts/utils/setup.sh
              chmod +x /tmp/setup.sh
              export APP_NAME="mi-aplicacion"
              export ENVIRONMENT="development"
              export IMAGE_TAG="${BITBUCKET_BUILD_NUMBER}"
              /tmp/setup.sh

      - step:
          name: "üê≥ Build Docker Image"
          services:
            - docker
          script:
            - |
              echo "üì• Descargando script de build Docker..."
              curl -s -o /tmp/build-image.sh ${CICD_SCRIPTS_BASE_URL}/scripts/docker/build-image.sh
              chmod +x /tmp/build-image.sh
              export APP_NAME="mi-aplicacion"
              export IMAGE_TAG="${BITBUCKET_BUILD_NUMBER}"
              /tmp/build-image.sh

      - step:
          name: "üìã Generate K8s Manifests"
          script:
            - |
              echo "üì• Descargando script de generaci√≥n de manifiestos..."
              curl -s -o /tmp/generate-manifests.sh ${CICD_SCRIPTS_BASE_URL}/scripts/kubernetes/generate-manifests.sh
              chmod +x /tmp/generate-manifests.sh
              export APP_NAME="mi-aplicacion"
              export ENVIRONMENT="development"
              export IMAGE_TAG="${BITBUCKET_BUILD_NUMBER}"
              /tmp/generate-manifests.sh

      - step:
          name: "üöÄ Deploy to Rancher"
          script:
            - |
              echo "üì• Descargando script de deploy a Rancher..."
              curl -s -o /tmp/deploy-to-rancher.sh ${CICD_SCRIPTS_BASE_URL}/scripts/kubernetes/deploy-to-rancher.sh
              chmod +x /tmp/deploy-to-rancher.sh
              export APP_NAME="mi-aplicacion"
              export ENVIRONMENT="development"
              export IMAGE_TAG="${BITBUCKET_BUILD_NUMBER}"
              /tmp/deploy-to-rancher.sh

      - step:
          name: "‚úÖ Notify Success"
          script:
            - |
              echo "üöÄ Deployment to Rancher completed successfully!"
              echo "Application: mi-aplicacion"
              echo "Environment: development"
              echo "Image Tag: ${BITBUCKET_BUILD_NUMBER}"
              echo "Timestamp: $(date)"

  # Pipeline autom√°tico para production
    main:
      - step:
          name: "üîß Setup Environment"
          script:
            - |
              echo "üì• Descargando scripts de setup..."
              curl -s -o /tmp/setup.sh ${CICD_SCRIPTS_BASE_URL}/scripts/utils/setup.sh
              chmod +x /tmp/setup.sh
              export APP_NAME="mi-aplicacion"
              export ENVIRONMENT="production"
              export IMAGE_TAG="${BITBUCKET_BUILD_NUMBER}"
              /tmp/setup.sh

      - step:
          name: "üîç Detect JIRA Keys"
          script:
            - |
              echo "üì• Descargando script de detecci√≥n JIRA..."
              curl -s -o /tmp/detect-jira-keys.sh ${CICD_SCRIPTS_BASE_URL}/scripts/jira/detect-jira-keys.sh
              chmod +x /tmp/detect-jira-keys.sh
              /tmp/detect-jira-keys.sh

      - step:
          name: "üê≥ Build Docker Image"
          services:
            - docker
          script:
            - |
              echo "üì• Descargando script de build Docker..."
              curl -s -o /tmp/build-image.sh ${CICD_SCRIPTS_BASE_URL}/scripts/docker/build-image.sh
              chmod +x /tmp/build-image.sh
              export APP_NAME="mi-aplicacion"
              export IMAGE_TAG="${BITBUCKET_BUILD_NUMBER}"
              /tmp/build-image.sh

      - step:
          name: "üì§ Push to ECR"
          services:
            - docker
          script:
            - |
              echo "üì• Descargando script de push ECR..."
              apt-get update && apt-get install -y python3-pip
              pip3 install awscli
              curl -s -o /tmp/push-to-ecr.sh ${CICD_SCRIPTS_BASE_URL}/scripts/docker/push-to-ecr.sh
              chmod +x /tmp/push-to-ecr.sh
              /tmp/push-to-ecr.sh

      - step:
          name: "üìã Generate K8s Manifests"
          script:
            - |
              echo "üì• Descargando script de generaci√≥n de manifiestos..."
              curl -s -o /tmp/generate-manifests.sh ${CICD_SCRIPTS_BASE_URL}/scripts/kubernetes/generate-manifests.sh
              chmod +x /tmp/generate-manifests.sh
              export APP_NAME="mi-aplicacion"
              export ENVIRONMENT="production"
              export IMAGE_TAG="${BITBUCKET_BUILD_NUMBER}"
              /tmp/generate-manifests.sh

      - step:
          name: "‚ò∏Ô∏è Deploy to EKS"
          script:
            - |
              echo "üì• Descargando script de deploy EKS..."
              curl -s -o /tmp/deploy-to-eks.sh ${CICD_SCRIPTS_BASE_URL}/scripts/kubernetes/deploy-to-eks.sh
              chmod +x /tmp/deploy-to-eks.sh
              export APP_NAME="mi-aplicacion"
              export ENVIRONMENT="production"
              export IMAGE_TAG="${BITBUCKET_BUILD_NUMBER}"
              /tmp/deploy-to-eks.sh

      - step:
          name: "üí¨ Notify JIRA"
          script:
            - |
              echo "üì• Descargando script de comentario JIRA..."
              curl -s -o /tmp/comment-jira.sh ${CICD_SCRIPTS_BASE_URL}/scripts/jira/comment-jira.sh
              chmod +x /tmp/comment-jira.sh
              
              # Buscar autom√°ticamente la clave JIRA del commit o usar una por defecto
              JIRA_ISSUE_KEY="PROJ-123"  # Esto deber√≠a ser din√°mico en la realidad
              JIRA_COMMENT="Deployed to production successfully! Build: ${BITBUCKET_BUILD_NUMBER}"
              
              echo "üìù Comentando en JIRA issue: ${JIRA_ISSUE_KEY}"
              /tmp/comment-jira.sh "$JIRA_ISSUE_KEY" "$JIRA_COMMENT"

      - step:
          name: "‚úÖ Notify Success"
          script:
            - |
              echo "üéâ PRODUCTION DEPLOYMENT COMPLETED!"
              echo "===================================="
              echo "Application: mi-aplicacion"
              echo "Environment: production"
              echo "Image Tag: ${BITBUCKET_BUILD_NUMBER}"
              echo "Deploy Time: $(date)"
              echo "Status: SUCCESS"

  # ===========================================================================
  # PIPELINES MANUALES (CUSTOM)
  # ===========================================================================
  custom:
    # -------------------------------------------------------------------------
    # üê≥ DOCKER PIPELINES
    # -------------------------------------------------------------------------
    docker-build:
      - step:
          name: "üê≥ Build Docker Image Only"
          services:
            - docker
          script:
            - |
              echo "üì• Descargando script de build Docker..."
              curl -s -o /tmp/build-image.sh ${CICD_SCRIPTS_BASE_URL}/scripts/docker/build-image.sh
              chmod +x /tmp/build-image.sh
              export APP_NAME="mi-aplicacion"
              export IMAGE_TAG="manual-${BITBUCKET_BUILD_NUMBER}"
              /tmp/build-image.sh

    docker-push-ecr:
      - step:
          name: "üì§ Push to ECR"
          services:
            - docker
          script:
            - |
              echo "üì• Descargando script de push ECR..."
              apt-get update && apt-get install -y python3-pip
              pip3 install awscli
              curl -s -o /tmp/push-to-ecr.sh ${CICD_SCRIPTS_BASE_URL}/scripts/docker/push-to-ecr.sh
              chmod +x /tmp/push-to-ecr.sh
              /tmp/push-to-ecr.sh

    # -------------------------------------------------------------------------
    # üîó JIRA PIPELINES
    # -------------------------------------------------------------------------
    jira-comment:
      - variables:
          - name: JIRA_ISSUE_KEY
            value: "PROJ-123"
          - name: JIRA_COMMENT
            value: "Comentario autom√°tico desde Bitbucket Pipeline"
      - step:
          name: "üí¨ Comentar en JIRA Issue"
          script:
            - |
              echo "üì• Descargando script de comentario JIRA..."
              curl -s -o /tmp/comment-jira.sh ${CICD_SCRIPTS_BASE_URL}/scripts/jira/comment-jira.sh
              chmod +x /tmp/comment-jira.sh
              
              echo "üìù Ejecutando comentario en JIRA..."
              echo "Issue: ${JIRA_ISSUE_KEY}"
              echo "Comentario: ${JIRA_COMMENT}"
              
              /tmp/comment-jira.sh "${JIRA_ISSUE_KEY}" "${JIRA_COMMENT}"

    jira-detect:
      - step:
          name: "üîç Detectar Claves JIRA"
          script:
            - |
              echo "üì• Descargando script de detecci√≥n JIRA..."
              curl -s -o /tmp/detect-jira-keys.sh ${CICD_SCRIPTS_BASE_URL}/scripts/jira/detect-jira-keys.sh
              chmod +x /tmp/detect-jira-keys.sh
              
              echo "üîç Analizando commit message..."
              /tmp/detect-jira-keys.sh

    # -------------------------------------------------------------------------
    # ‚ò∏Ô∏è KUBERNETES PIPELINES
    # -------------------------------------------------------------------------
    k8s-generate-manifests:
      - step:
          name: "üìã Generate K8s Manifests"
          script:
            - |
              echo "üì• Descargando script de generaci√≥n de manifiestos..."
              curl -s -o /tmp/generate-manifests.sh ${CICD_SCRIPTS_BASE_URL}/scripts/kubernetes/generate-manifests.sh
              chmod +x /tmp/generate-manifests.sh
              export APP_NAME="mi-aplicacion"
              export ENVIRONMENT="manual"
              export IMAGE_TAG="${BITBUCKET_BUILD_NUMBER}"
              /tmp/generate-manifests.sh

    k8s-deploy-rancher:
      - step:
          name: "üöÄ Deploy to Rancher"
          script:
            - |
              echo "üì• Descargando script de deploy a Rancher..."
              curl -s -o /tmp/deploy-to-rancher.sh ${CICD_SCRIPTS_BASE_URL}/scripts/kubernetes/deploy-to-rancher.sh
              chmod +x /tmp/deploy-to-rancher.sh
              export APP_NAME="mi-aplicacion"
              export ENVIRONMENT="development"
              export IMAGE_TAG="${BITBUCKET_BUILD_NUMBER}"
              /tmp/deploy-to-rancher.sh

    k8s-deploy-eks:
      - step:
          name: "‚ò∏Ô∏è Deploy to EKS"
          script:
            - |
              echo "üì• Descargando script de deploy EKS..."
              curl -s -o /tmp/deploy-to-eks.sh ${CICD_SCRIPTS_BASE_URL}/scripts/kubernetes/deploy-to-eks.sh
              chmod +x /tmp/deploy-to-eks.sh
              export APP_NAME="mi-aplicacion"
              export ENVIRONMENT="production"
              export IMAGE_TAG="${BITBUCKET_BUILD_NUMBER}"
              /tmp/deploy-to-eks.sh

    # -------------------------------------------------------------------------
    # üêõ DEBUG PIPELINES
    # -------------------------------------------------------------------------
    debug-cicd-tools:
      - step:
          name: "üêõ Debug - Verificar Acceso a Scripts Remotos"
          script:
            - |
              echo "üîç DEBUG: Verificando acceso a scripts remotos"
              echo "=============================================="
              
              # Variables disponibles
              echo "‚úÖ Variables de entorno:"
              echo "   CICD_SCRIPTS_BASE_URL: ${CICD_SCRIPTS_BASE_URL}"
              echo "   APP_NAME: ${APP_NAME}"
              echo "   APP_PORT: ${APP_PORT}"
              
              # Test conexi√≥n HTTP a scripts
              echo ""
              echo "üåê Test de conectividad a scripts:"
              scripts=(
                "scripts/utils/setup.sh"
                "scripts/docker/build-image.sh"
                "scripts/docker/push-to-ecr.sh"
                "scripts/jira/detect-jira-keys.sh"
                "scripts/jira/comment-jira.sh"
                "scripts/kubernetes/generate-manifests.sh"
                "scripts/kubernetes/deploy-to-rancher.sh"
                "scripts/kubernetes/deploy-to-eks.sh"
              )
              
              for script_path in "${scripts[@]}"; do
                script_url="${CICD_SCRIPTS_BASE_URL}/${script_path}"
                if curl -s -I "$script_url" | head -1 | grep -q "200"; then
                  echo "   ‚úÖ $(basename $script_path): ACCESIBLE"
                else
                  echo "   ‚ùå $(basename $script_path): NO ACCESIBLE"
                fi
              done
              
              # Descargar y verificar un script de ejemplo
              echo ""
              echo "üì• Test descarga de script ejemplo:"
              sample_script_url="${CICD_SCRIPTS_BASE_URL}/scripts/docker/build-image.sh"
              curl -s -o /tmp/debug-script.sh "$sample_script_url"
              
              if [ -f "/tmp/debug-script.sh" ]; then
                echo "   ‚úÖ Script descargado: /tmp/debug-script.sh"
                echo "   üìè Tama√±o: $(wc -l < /tmp/debug-script.sh) l√≠neas"
                echo "   üöÄ Ejecutable: $(chmod +x /tmp/debug-script.sh && echo 'YES')"
                echo "   üìã SHA256: $(sha256sum /tmp/debug-script.sh | cut -d' ' -f1)"
              else
                echo "   ‚ùå No se pudo descargar el script"
              fi

    debug-environment:
      - step:
          name: "üêõ Debug - Variables y Entorno"
          script:
            - |
              echo "üîç DEBUG: Variables de entorno y configuraci√≥n"
              echo "=============================================="
              
              # Variables de Bitbucket
              echo "üè∑Ô∏è Bitbucket Variables:"
              echo "   BITBUCKET_BUILD_NUMBER: ${BITBUCKET_BUILD_NUMBER}"
              echo "   BITBUCKET_COMMIT: ${BITBUCKET_COMMIT}"
              echo "   BITBUCKET_BRANCH: ${BITBUCKET_BRANCH}"
              echo "   BITBUCKET_REPO_SLUG: ${BITBUCKET_REPO_SLUG}"
              
              # Variables de aplicaci√≥n
              echo ""
              echo "üì¶ Application Variables:"
              echo "   APP_NAME: ${APP_NAME}"
              echo "   APP_PORT: ${APP_PORT}"
              
              # Verificar comandos disponibles
              echo ""
              echo "üîß Herramientas disponibles:"
              for cmd in docker curl aws git; do
                if command -v $cmd &> /dev/null; then
                  echo "   ‚úÖ $cmd: $(which $cmd)"
                else
                  echo "   ‚ùå $cmd: NOT FOUND"
                fi
              done

    # -------------------------------------------------------------------------
    # üöÄ PIPELINE COMPLETO (End-to-End)
    # -------------------------------------------------------------------------
    full-pipeline:
      - step:
          name: "1. üîß Setup Environment"
          script:
            - |
              curl -s -o /tmp/setup.sh ${CICD_SCRIPTS_BASE_URL}/scripts/utils/setup.sh
              chmod +x /tmp/setup.sh
              export APP_NAME="mi-aplicacion"
              export ENVIRONMENT="production"
              export IMAGE_TAG="${BITBUCKET_BUILD_NUMBER}"
              /tmp/setup.sh

      - step:
          name: "2. üîç Detect JIRA Keys"
          script:
            - |
              curl -s -o /tmp/detect-jira-keys.sh ${CICD_SCRIPTS_BASE_URL}/scripts/jira/detect-jira-keys.sh
              chmod +x /tmp/detect-jira-keys.sh
              /tmp/detect-jira-keys.sh

      - step:
          name: "3. üê≥ Build Docker Image"
          services:
            - docker
          script:
            - |
              curl -s -o /tmp/build-image.sh ${CICD_SCRIPTS_BASE_URL}/scripts/docker/build-image.sh
              chmod +x /tmp/build-image.sh
              export APP_NAME="mi-aplicacion"
              export IMAGE_TAG="${BITBUCKET_BUILD_NUMBER}"
              /tmp/build-image.sh

      - step:
          name: "4. üì§ Push to ECR"
          services:
            - docker
          script:
            - |
              apt-get update && apt-get install -y python3-pip
              pip3 install awscli
              curl -s -o /tmp/push-to-ecr.sh ${CICD_SCRIPTS_BASE_URL}/scripts/docker/push-to-ecr.sh
              chmod +x /tmp/push-to-ecr.sh
              /tmp/push-to-ecr.sh

      - step:
          name: "5. üìã Generate K8s Manifests"
          script:
            - |
              curl -s -o /tmp/generate-manifests.sh ${CICD_SCRIPTS_BASE_URL}/scripts/kubernetes/generate-manifests.sh
              chmod +x /tmp/generate-manifests.sh
              export APP_NAME="mi-aplicacion"
              export ENVIRONMENT="production"
              export IMAGE_TAG="${BITBUCKET_BUILD_NUMBER}"
              /tmp/generate-manifests.sh

      - step:
          name: "6. ‚ò∏Ô∏è Deploy to EKS"
          script:
            - |
              curl -s -o /tmp/deploy-to-eks.sh ${CICD_SCRIPTS_BASE_URL}/scripts/kubernetes/deploy-to-eks.sh
              chmod +x /tmp/deploy-to-eks.sh
              export APP_NAME="mi-aplicacion"
              export ENVIRONMENT="production"
              export IMAGE_TAG="${BITBUCKET_BUILD_NUMBER}"
              /tmp/deploy-to-eks.sh

      - step:
          name: "7. üí¨ Notify JIRA"
          script:
            - |
              curl -s -o /tmp/comment-jira.sh ${CICD_SCRIPTS_BASE_URL}/scripts/jira/comment-jira.sh
              chmod +x /tmp/comment-jira.sh
              
              JIRA_ISSUE_KEY="PROJ-123"
              JIRA_COMMENT="Pipeline completo ejecutado exitosamente! Build: ${BITBUCKET_BUILD_NUMBER}"
              
              /tmp/comment-jira.sh "$JIRA_ISSUE_KEY" "$JIRA_COMMENT"

      - step:
          name: "8. ‚úÖ Completion"
          script:
            - |
              echo "üéâ FULL PIPELINE COMPLETED SUCCESSFULLY!"
              echo "========================================"
              echo "Application: mi-aplicacion"
              echo "Environment: production"
              echo "Image Tag: ${BITBUCKET_BUILD_NUMBER}"
              echo "Total Steps: 8"
              echo "Status: SUCCESS"
              echo "Completion Time: $(date)"